(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(factory());
}(this, (function () {

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};



function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var beditaSdk = createCommonjsModule(function (module, exports) {
(function (global, factory) {
	factory(exports);
}(commonjsGlobal, (function (exports) {

function _AwaitValue(value) {
  this.wrapped = value;
}

function _AsyncGenerator(gen) {
  var front, back;

  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var wrappedAwait = value instanceof _AwaitValue;
      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
        if (wrappedAwait) {
          resume("next", arg);
          return;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;

      case "throw":
        front.reject(value);
        break;

      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

if (typeof Symbol === "function" && Symbol.asyncIterator) {
  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
    return this;
  };
}

_AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

_AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

_AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

//@ts-check

/* import tv4 from 'tv4';


tv4.addFormat('date-time', (data) => {
    if (typeof data === 'string') {
        data = new Date(data);
    }
    if ((data instanceof Date) && !isNaN(data.getTime())) {
        return null;
    }
    return 'Invalid date';
}); */

/**
 * 
 * 
 */
var SCHEMA = {
  definitions: {
    metadata: {
      type: 'object',
      additionalProperties: true,
      properties: {
        created: {
          type: 'string',
          format: 'date-time'
        },
        modified: {
          type: 'string',
          format: 'date-time'
        }
      }
    }
  }
};
/**
 * 
 * 
 */

var Model =
/*#__PURE__*/
function () {
  function Model() {
    _classCallCheck(this, Model);
  }

  _createClass(Model, [{
    key: "type",

    /**
     * 
     * 
     */
    get: function get() {
      return this.constructor.name;
    }
    /**
     * 
     * 
     */

  }], [{
    key: "schema",
    get: function get() {
      return SCHEMA;
    }
  }]);

  return Model;
}();

var ObjectModel =
/*#__PURE__*/
function (_Model) {
  _inherits(ObjectModel, _Model);

  function ObjectModel() {
    _classCallCheck(this, ObjectModel);

    return _possibleConstructorReturn(this, (ObjectModel.__proto__ || Object.getPrototypeOf(ObjectModel)).apply(this, arguments));
  }

  return ObjectModel;
}(Model);

var ResourceModel =
/*#__PURE__*/
function (_Model) {
  _inherits(ResourceModel, _Model);

  function ResourceModel() {
    _classCallCheck(this, ResourceModel);

    return _possibleConstructorReturn(this, (ResourceModel.__proto__ || Object.getPrototypeOf(ResourceModel)).apply(this, arguments));
  }

  return ResourceModel;
}(Model);

var UserModel =
/*#__PURE__*/
function (_ObjectModel) {
  _inherits(UserModel, _ObjectModel);

  function UserModel() {
    _classCallCheck(this, UserModel);

    return _possibleConstructorReturn(this, (UserModel.__proto__ || Object.getPrototypeOf(UserModel)).apply(this, arguments));
  }

  return UserModel;
}(ObjectModel);

var ApplicationModel =
/*#__PURE__*/
function (_ResourceModel) {
  _inherits(ApplicationModel, _ResourceModel);

  function ApplicationModel() {
    _classCallCheck(this, ApplicationModel);

    return _possibleConstructorReturn(this, (ApplicationModel.__proto__ || Object.getPrototypeOf(ApplicationModel)).apply(this, arguments));
  }

  return ApplicationModel;
}(ResourceModel);

var RoleModel =
/*#__PURE__*/
function (_ResourceModel) {
  _inherits(RoleModel, _ResourceModel);

  function RoleModel() {
    _classCallCheck(this, RoleModel);

    return _possibleConstructorReturn(this, (RoleModel.__proto__ || Object.getPrototypeOf(RoleModel)).apply(this, arguments));
  }

  return RoleModel;
}(ResourceModel);

var StreamModel =
/*#__PURE__*/
function (_ResourceModel) {
  _inherits(StreamModel, _ResourceModel);

  function StreamModel() {
    _classCallCheck(this, StreamModel);

    return _possibleConstructorReturn(this, (StreamModel.__proto__ || Object.getPrototypeOf(StreamModel)).apply(this, arguments));
  }

  return StreamModel;
}(ResourceModel);

/**
 * 
 * 
 */

var Collection = function Collection() {
  _classCallCheck(this, Collection);
};

/**
 * 
 * 
 */
var Factory = function Factory() {
  _classCallCheck(this, Factory);
};

/**
 * handle requests and responses (+ auth headers, auth renew) from BEdita4
 * 
 * 
 */

var Api =
/*#__PURE__*/
function (_Factory) {
  _inherits(Api, _Factory);

  function Api() {
    _classCallCheck(this, Api);

    return _possibleConstructorReturn(this, (Api.__proto__ || Object.getPrototypeOf(Api)).apply(this, arguments));
  }

  return Api;
}(Factory);

var commonjsGlobal$$1 = typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};





function createCommonjsModule$$1(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var objectPath = createCommonjsModule$$1(function (module) {
(function (root, factory){
  'use strict';

  /*istanbul ignore next:cant test*/
  {
    module.exports = factory();
  }
})(commonjsGlobal$$1, function(){
  'use strict';

  var toStr = Object.prototype.toString;
  function hasOwnProperty(obj, prop) {
    if(obj == null) {
      return false
    }
    //to handle objects with null prototypes (too edge case?)
    return Object.prototype.hasOwnProperty.call(obj, prop)
  }

  function isEmpty(value){
    if (!value) {
      return true;
    }
    if (isArray(value) && value.length === 0) {
        return true;
    } else if (typeof value !== 'string') {
        for (var i in value) {
            if (hasOwnProperty(value, i)) {
                return false;
            }
        }
        return true;
    }
    return false;
  }

  function toString(type){
    return toStr.call(type);
  }

  function isObject(obj){
    return typeof obj === 'object' && toString(obj) === "[object Object]";
  }

  var isArray = Array.isArray || function(obj){
    /*istanbul ignore next:cant test*/
    return toStr.call(obj) === '[object Array]';
  };

  function isBoolean(obj){
    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';
  }

  function getKey(key){
    var intKey = parseInt(key);
    if (intKey.toString() === key) {
      return intKey;
    }
    return key;
  }

  function factory(options) {
    options = options || {};

    var objectPath = function(obj) {
      return Object.keys(objectPath).reduce(function(proxy, prop) {
        if(prop === 'create') {
          return proxy;
        }

        /*istanbul ignore else*/
        if (typeof objectPath[prop] === 'function') {
          proxy[prop] = objectPath[prop].bind(objectPath, obj);
        }

        return proxy;
      }, {});
    };

    function hasShallowProperty(obj, prop) {
      return (options.includeInheritedProps || (typeof prop === 'number' && Array.isArray(obj)) || hasOwnProperty(obj, prop))
    }

    function getShallowProperty(obj, prop) {
      if (hasShallowProperty(obj, prop)) {
        return obj[prop];
      }
    }

    function set(obj, path, value, doNotReplace){
      if (typeof path === 'number') {
        path = [path];
      }
      if (!path || path.length === 0) {
        return obj;
      }
      if (typeof path === 'string') {
        return set(obj, path.split('.').map(getKey), value, doNotReplace);
      }
      var currentPath = path[0];
      var currentValue = getShallowProperty(obj, currentPath);
      if (path.length === 1) {
        if (currentValue === void 0 || !doNotReplace) {
          obj[currentPath] = value;
        }
        return currentValue;
      }

      if (currentValue === void 0) {
        //check if we assume an array
        if(typeof path[1] === 'number') {
          obj[currentPath] = [];
        } else {
          obj[currentPath] = {};
        }
      }

      return set(obj[currentPath], path.slice(1), value, doNotReplace);
    }

    objectPath.has = function (obj, path) {
      if (typeof path === 'number') {
        path = [path];
      } else if (typeof path === 'string') {
        path = path.split('.');
      }

      if (!path || path.length === 0) {
        return !!obj;
      }

      for (var i = 0; i < path.length; i++) {
        var j = getKey(path[i]);

        if((typeof j === 'number' && isArray(obj) && j < obj.length) ||
          (options.includeInheritedProps ? (j in Object(obj)) : hasOwnProperty(obj, j))) {
          obj = obj[j];
        } else {
          return false;
        }
      }

      return true;
    };

    objectPath.ensureExists = function (obj, path, value){
      return set(obj, path, value, true);
    };

    objectPath.set = function (obj, path, value, doNotReplace){
      return set(obj, path, value, doNotReplace);
    };

    objectPath.insert = function (obj, path, value, at){
      var arr = objectPath.get(obj, path);
      at = ~~at;
      if (!isArray(arr)) {
        arr = [];
        objectPath.set(obj, path, arr);
      }
      arr.splice(at, 0, value);
    };

    objectPath.empty = function(obj, path) {
      if (isEmpty(path)) {
        return void 0;
      }
      if (obj == null) {
        return void 0;
      }

      var value, i;
      if (!(value = objectPath.get(obj, path))) {
        return void 0;
      }

      if (typeof value === 'string') {
        return objectPath.set(obj, path, '');
      } else if (isBoolean(value)) {
        return objectPath.set(obj, path, false);
      } else if (typeof value === 'number') {
        return objectPath.set(obj, path, 0);
      } else if (isArray(value)) {
        value.length = 0;
      } else if (isObject(value)) {
        for (i in value) {
          if (hasShallowProperty(value, i)) {
            delete value[i];
          }
        }
      } else {
        return objectPath.set(obj, path, null);
      }
    };

    objectPath.push = function (obj, path /*, values */){
      var arr = objectPath.get(obj, path);
      if (!isArray(arr)) {
        arr = [];
        objectPath.set(obj, path, arr);
      }

      arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));
    };

    objectPath.coalesce = function (obj, paths, defaultValue) {
      var value;

      for (var i = 0, len = paths.length; i < len; i++) {
        if ((value = objectPath.get(obj, paths[i])) !== void 0) {
          return value;
        }
      }

      return defaultValue;
    };

    objectPath.get = function (obj, path, defaultValue){
      if (typeof path === 'number') {
        path = [path];
      }
      if (!path || path.length === 0) {
        return obj;
      }
      if (obj == null) {
        return defaultValue;
      }
      if (typeof path === 'string') {
        return objectPath.get(obj, path.split('.'), defaultValue);
      }

      var currentPath = getKey(path[0]);
      var nextObj = getShallowProperty(obj, currentPath);
      if (nextObj === void 0) {
        return defaultValue;
      }

      if (path.length === 1) {
        return nextObj;
      }

      return objectPath.get(obj[currentPath], path.slice(1), defaultValue);
    };

    objectPath.del = function del(obj, path) {
      if (typeof path === 'number') {
        path = [path];
      }

      if (obj == null) {
        return obj;
      }

      if (isEmpty(path)) {
        return obj;
      }
      if(typeof path === 'string') {
        return objectPath.del(obj, path.split('.'));
      }

      var currentPath = getKey(path[0]);
      if (!hasShallowProperty(obj, currentPath)) {
        return obj;
      }

      if(path.length === 1) {
        if (isArray(obj)) {
          obj.splice(currentPath, 1);
        } else {
          delete obj[currentPath];
        }
      } else {
        return objectPath.del(obj[currentPath], path.slice(1));
      }

      return obj;
    };

    return objectPath;
  }

  var mod = factory();
  mod.create = factory;
  mod.withInheritedProps = factory({includeInheritedProps: true});
  return mod;
});
});

/**
 * 
 * 
 * 
 */

var Url =
/*#__PURE__*/
function (_Factory) {
  _inherits(Url, _Factory);

  function Url() {
    _classCallCheck(this, Url);

    return _possibleConstructorReturn(this, (Url.__proto__ || Object.getPrototypeOf(Url)).apply(this, arguments));
  }

  return Url;
}(Factory);

/**
 * 
 * 
 */

var ModelDesign =
/*#__PURE__*/
function (_Factory) {
  _inherits(ModelDesign, _Factory);

  function ModelDesign() {
    _classCallCheck(this, ModelDesign);

    return _possibleConstructorReturn(this, (ModelDesign.__proto__ || Object.getPrototypeOf(ModelDesign)).apply(this, arguments));
  }

  return ModelDesign;
}(Factory);

/**
 * 
 * 
 */

var Session =
/*#__PURE__*/
function (_Factory) {
  _inherits(Session, _Factory);

  function Session() {
    _classCallCheck(this, Session);

    return _possibleConstructorReturn(this, (Session.__proto__ || Object.getPrototypeOf(Session)).apply(this, arguments));
  }

  _createClass(Session, [{
    key: "getUser",
    value: function getUser() {}
  }, {
    key: "isLogged",
    value: function isLogged() {}
  }, {
    key: "login",
    value: function login(username, password) {}
  }, {
    key: "onLoginResponse",
    value: function onLoginResponse(res) {}
  }, {
    key: "logout",
    value: function logout() {}
  }, {
    key: "renew",
    value: function renew() {}
  }]);

  return Session;
}(Factory);

var styles = 'font-family: monospace; color: #BBB;';
var Debug =
/*#__PURE__*/
function (_Factory) {
  _inherits(Debug, _Factory);

  function Debug() {
    _classCallCheck(this, Debug);

    return _possibleConstructorReturn(this, (Debug.__proto__ || Object.getPrototypeOf(Debug)).apply(this, arguments));
  }

  _createClass(Debug, [{
    key: "log",
    value: function log() {
      var _console;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (_console = console).log.apply(_console, ['%c [BEDITA]', styles].concat(args));
    }
  }, {
    key: "warn",
    value: function warn() {
      var _console2;

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      (_console2 = console).warn.apply(_console2, ['%c [BEDITA]', styles].concat(args));
    }
  }, {
    key: "error",
    value: function error() {
      var _console3;

      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      (_console3 = console).error.apply(_console3, ['%c [BEDITA]', styles].concat(args));
    }
  }]);

  return Debug;
}(Factory);

/**
 * 
 * 
 */

var Store =
/*#__PURE__*/
function (_Factory) {
  _inherits(Store, _Factory);

  function Store() {
    _classCallCheck(this, Store);

    return _possibleConstructorReturn(this, (Store.__proto__ || Object.getPrototypeOf(Store)).apply(this, arguments));
  }

  return Store;
}(Factory);

// MODELS

exports.Api = Api;
exports.Url = Url;
exports.ModelDesign = ModelDesign;
exports.Session = Session;
exports.Debug = Debug;
exports.Store = Store;
exports.ObjectModel = ObjectModel;
exports.ResourceModel = ResourceModel;
exports.UserModel = UserModel;
exports.ApplicationModel = ApplicationModel;
exports.RoleModel = RoleModel;
exports.StreamModel = StreamModel;
exports.Collection = Collection;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
});

unwrapExports(beditaSdk);

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
